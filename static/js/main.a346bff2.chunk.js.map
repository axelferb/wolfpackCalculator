{"version":3,"sources":["Components/AngleCalculator/AngleCalculator.js","Components/SpeedCalculator/SpeedCalculator.js","App.js","Math/Math.js","serviceWorker.js","index.js"],"names":["AngleCalculator","props","bowAngleCalculations","setBowAngleCalculations","calculatedAngle","getAndSetAngleCalculation","evt","target","name","parseFloat","value","zoom","className","onChange","type","defaultValue","distance","toFixed","bowAngle","SpeedCalculator","speedCalculations","setSpeedCalculations","calculatedSpeed","targetLength","getAndSetSpeedCalculation","undefined","App","React","useState","targetMastHeight","targetLength1","angularMast","angularLength","Math","asin","tan","PI","calculateAngle","lineOfSightAngle","angleOnBow","subSpeed","timeToCross","targetLength2","speedInKnots","cos","calculateSpeed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a346bff2.chunk.js","sourcesContent":["import React from 'react'\nimport './AngleCalculator.css';\n\nexport default function AngleCalculator(props) {\n  const { bowAngleCalculations, setBowAngleCalculations, calculatedAngle } = props;\n  const getAndSetAngleCalculation = (evt) => {\n    setBowAngleCalculations({\n      ...bowAngleCalculations,\n      [evt.target.name]: parseFloat(evt.target.value)\n    });\n    // Use default unless told otherwise.\n    return !bowAngleCalculations.zoom ? setBowAngleCalculations({...bowAngleCalculations, 'zoom': 4}) : null;\n  }\n  return (\n    <div className='speedCalculatorContainer'>\n      <h2>Calculate angle of target</h2>\n      <label>targetLength</label>\n      <input onChange={(evt) => getAndSetAngleCalculation(evt)} name='targetLength' type='number'></input>\n      <label>targetMastHeight</label>\n      <input onChange={(evt) => getAndSetAngleCalculation(evt)} name='targetMastHeight' type='number'></input>\n      <label>angularMast</label>\n      <input onChange={(evt) => getAndSetAngleCalculation(evt)} name='angularMast' type='number'></input>\n      <label>angularLength</label>\n      <input onChange={(evt) => getAndSetAngleCalculation(evt)} name='angularLength' type='number'></input>\n      <label>zoom</label>\n      <input onChange={(evt) => getAndSetAngleCalculation(evt)} name='zoom' type='number' defaultValue='4'></input>\n      <span className='resultNumber'>{calculatedAngle.distance.toFixed(0)}m</span>\n      <span className='resultNumber'>{calculatedAngle.bowAngle.toFixed(3)}Â°</span>\n    </div>\n  )\n}\n","import React from 'react'\nimport './SpeedCalculator.css';\n\nexport default function SpeedCalculator(props) {\n  let { speedCalculations, setSpeedCalculations, calculatedSpeed, targetLength, calculatedAngle } = props;\n  \n  const checkIfLengthExists = () => {\n    return !targetLength ? targetLength = undefined : targetLength;\n  }\n\n  const checkIfAngleExists = () => {\n    return !calculatedAngle.bowAngle ? calculatedAngle.bowAngle = undefined : calculatedAngle.bowAngle;\n  }\n\n  const getAndSetSpeedCalculation = (evt) => {\n    setSpeedCalculations({\n      ...speedCalculations,\n      [evt.target.name]: parseFloat(evt.target.value)\n    });\n    // Use default unless told otherwise.\n  }\n\n  return (\n    <div className='speedCalculatorContainer'>\n      <h2>Calculate speed of target</h2>\n      <label>subSpeed</label>\n      <input onChange={(evt) => getAndSetSpeedCalculation(evt)} name='subSpeed' type='number'></input>\n      <label>targetLength</label>\n      <input onChange={(evt) => getAndSetSpeedCalculation(evt)} value={checkIfLengthExists() || ''} name='targetLength' type='number'></input>\n      <label>lineOfSightAngle</label>\n      <input onChange={(evt) => getAndSetSpeedCalculation(evt)} name='lineOfSightAngle' type='number'></input>\n      <label>angleOnBow</label>\n      <input onChange={(evt) => getAndSetSpeedCalculation(evt)} value={checkIfAngleExists() || ''} name='angleOnBow' type='number'></input>\n      <label>timeToCross</label>\n      <input onChange={(evt) => getAndSetSpeedCalculation(evt)} name='timeToCross' type='number'></input>\n      <span className='resultNumber'>{calculatedSpeed.toFixed(3)} KNOTS</span>\n    </div>\n  )\n}\n","import React from 'react';\nimport './App.css';\nimport AngleCalculator from './Components/AngleCalculator/AngleCalculator';\nimport SpeedCalculator from './Components/SpeedCalculator/SpeedCalculator';\nimport { calculateAngle, calculateSpeed } from './Math/Math';\n\nexport default function App() {\n  const [bowAngleCalculations, setBowAngleCalculations] = React.useState({});\n  let { targetMastHeight, targetLength, angularMast, angularLength, zoom } = bowAngleCalculations;\n  \n  // Hardcoded 4.\n  let calculatedAngle = calculateAngle(targetMastHeight, targetLength, angularMast, angularLength, zoom);\n\n\n  const [speedCalculations, setSpeedCalculations] = React.useState({});\n  let { lineOfSightAngle, angleOnBow, subSpeed, timeToCross } = speedCalculations;\n  let calculatedSpeed = calculateSpeed(lineOfSightAngle, angleOnBow, subSpeed, timeToCross, targetLength);\n\n  return (\n    <div className=\"App\">\n      <AngleCalculator setBowAngleCalculations={setBowAngleCalculations} bowAngleCalculations={bowAngleCalculations} calculatedAngle={calculatedAngle} />\n      <SpeedCalculator setSpeedCalculations={setSpeedCalculations} speedCalculations={speedCalculations} calculatedSpeed={calculatedSpeed} targetLength={targetLength} calculatedAngle={calculatedAngle} />\n    </div>\n  );\n}\n","const calculateAngle = (targetMastHeight, targetLength1, angularMast, angularLength, zoom) => {\n  let distance = 100 * ((targetMastHeight / angularMast) * zoom);\n  let bowAngle = Math.asin(distance * (Math.tan(angularLength / (100 * zoom)) / targetLength1)) * (180 / Math.PI);\n\n  return {distance, bowAngle};\n}\n\nconst calculateSpeed = (lineOfSightAngle, angleOnBow, subSpeed, timeToCross, targetLength2) => {\n  let vMesure = (targetLength2 / timeToCross);\n  let speedInKnots = vMesure * 1.94384;\n  \n  let targetVelocity = (subSpeed * Math.cos((180 - (angleOnBow + lineOfSightAngle)) * (Math.PI / 180))) + speedInKnots;\n\n  // (180 / Math.PI)\n\n  return targetVelocity;\n}\n\nexport {\n  calculateAngle,\n  calculateSpeed\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}